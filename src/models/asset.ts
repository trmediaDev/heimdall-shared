import { ObjectId } from 'bson';
import { Type } from 'class-transformer';
import { IsArray, IsBoolean, IsEnum, IsOptional, IsString, ValidateNested } from 'class-validator';

import { AssetType } from './asset-type';
import { CategorySubcategory } from './categorysubcategory';

export class AssetFindRequest {
    @IsEnum(AssetType)
    @IsOptional()
    type?: AssetType;

    @IsString()
    @IsOptional()
    filename?: string | RegExp;

    @IsString()
    @IsOptional()
    readableFilename?: string;

    @IsString()
    @IsOptional()
    description?: string;

    @IsArray()
    @ValidateNested()
    @IsOptional()
    categorySubcategories?: CategorySubcategory[];
}

export declare class AssetPostRequest {
    @IsEnum(AssetType)
    type: AssetType;

    @IsString()
    readableFilename: string;

    @IsString()
    @IsOptional()
    description?: string;

    @IsArray()
    @IsOptional()
    keywords?: [];
}

export class AssetPatchRequest {
    @IsEnum(AssetType)
    @IsOptional()
    type?: AssetType;

    @IsString()
    @IsOptional()
    readableFilename?: string;

    @IsString()
    @IsOptional()
    description?: string;

    @IsArray()
    @IsOptional()
    keywords?: [];
}

export class Asset {
    @IsEnum(AssetType)
    type: AssetType;

    /**
     * This is used as the file name when storing the file on GCP
     * or on local disk. filename consist of mongo oid + extension
     */
    @IsString()
    filename: string;

    @IsString()
    readableFilename: string;

    @IsString()
    @IsOptional()
    description?: string;

    @IsArray()
    keywords: string[];

    /** Right after an upload or file reload from GCS/S3 , this field will be generated by the server that handled the request */
    @Type(() => ObjectId)
    @IsOptional()
    cachedServerId?: ObjectId;

    @IsString()
    @IsOptional()
    cachedFilepath?: string;

    @IsString()
    @IsOptional()
    cachedThumbnailpath?: string;

    @IsString()
    @IsOptional()
    thumbnailName?: string;

    @IsBoolean()
    @IsOptional()
    repetable?: boolean =false;

    @IsBoolean()
    @IsOptional()
    disabled?: boolean=false;

    @Type(() => Date)
    createdDate: Date;

    @Type(() => Date)
    updatedDate: Date;
}

export class AssetDBObject extends Asset {
    @Type(() => ObjectId)
    _id: ObjectId;
}
